create sequence client_ids
start with 100
increment by 1;

drop sequence client_ids;

create table custom_TMP_clients (
       id number primary key,
       name varchar2(32) not null,
       patronymic varchar2(64) null,
       surname varchar2(64) not null,
       al_cdate date default sysdate
)
partition by range (al_cdate)
interval(interval '1' month)
subpartition by hash (id)
subpartitions 8
(
       partition p1 values less than (date '2022-01-01')
)
compress;

drop table custom_TMP_clients;

create table custom_TMP_adress (
       id number generated by default on null as identity,
       cust_id number references custom_TMP_clients not null,
       adress varchar2(256) not null,
       branch number not null,
       al_cdate date default sysdate 
)
partition by list(branch)
(
 partition t1 values (1),
 partition t2 values (15),
 partition t3 values (1000) 
);

drop table custom_TMP_adress;

create index  indx_custom_TMP_address_adr on 
custom_TMP_adress(cust_id) local;

create or replace procedure fill_tables
       (count_row_client_table in number,
        count_row_adress_table in number)
is
        fk_client number := client_ids.nextval;
begin
        for cntr in 1..count_row_client_table
        loop
          insert into custom_TMP_clients (id, name, surname) 
          values (client_ids.nextval, dbms_random.string('x', 10),
                  dbms_random.string('x', 10));
        end loop;
        
        for cntr in 1..count_row_adress_table
        loop
          insert into custom_TMP_adress (cust_id, adress, branch)
          values (MOD(cntr, 3) + fk_client + 1,
                  dbms_random.string('x', 10),
                 15);
        end loop;
end;

select client_ids.nextval from fes_work;

begin
  fill_tables(4,4);
end;

select * from custom_TMP_clients;
select * from custom_tmp_adress;

delete from custom_TMP_clients;
delete from custom_tmp_adress;


create or replace procedure custom_tmp_deduplicate()
       (client_id in number,
        branch_id in number)
is
       count_adrs number;
begin
        select count(*) into count_adrs 
               from custom_tmp_adress cta
               where cta.branch_id = branch_id and cust_id = client_id;
        
        if count_adrs >= 2
        then
           delete from custom_tmp_adress 
                  where rowid not in (select min(rowid)       -- здесь могло быть поле даты, но в нашем случае даты абсолютно одинаковые, поэтому смотрим по rowid
                                      from custom_tmp_adress cta 
                                      where cta.branch_id = branch_id and cust_id = client_id
                                     ) and cta.branch_id = branch_id and cust_id = client_id;
        end if;
end;

create or replace procedure tmp_deduplicate
       (client_id in number,
        branch_id in number)
is
        count_adrs number := 0;
begin
        select count(*) into count_adrs 
               from custom_tmp_adress cta
               where cta.branch = branch_id and cta.cust_id = client_id;
        
        if count_adrs >= 2 then
           delete from custom_tmp_adress cta
                  where rowid not in (select min(rowid)       -- здесь могло быть поле даты, но в нашем случае даты абсолютно одинаковые, поэтому смотрим по rowid
                                      from custom_tmp_adress cta 
                                      where cta.branch = branch_id and cta.cust_id = client_id
                                     ) and cta.branch = branch_id and cta.cust_id = client_id;
        end if;
end;

select * from custom_TMP_clients;
select * from custom_tmp_adress;

begin
        tmp_deduplicate(121, 18);                             
end;

create or replace function tmp_link_consists
          return integer
is
          res integer;
begin
          select distinct case when exists (
                   select 1 from custom_tmp_adress where cust_id not in 
                          (
                          select id from custom_TMP_clients
                          )
                   ) then 0 
                      else 1 end 
                        into res from custom_tmp_adress;
          
          if res = 0 then 
            dbms_output.put_line('false');
          else
            dbms_output.put_line('true');
          end if;
return  res;
end; 

select * from custom_TMP_clients;
select * from custom_tmp_adress;

begin 
       dbms_output.put_line(tmp_link_consists());
end;

-- SCD (таски на версионирование)
create sequence load_ids
start with 100
increment by 1;

create table i_TMP_clients (
       id number primary key,
       name varchar2(32) not null,
       patronymic varchar2(64) null,
       surname varchar2(64) not null,
       al_cdate date default sysdate
)
partition by range (al_cdate)
interval(interval '1' month)
subpartition by hash (id)
subpartitions 8
(
       partition p1 values less than (date '2022-01-01')
)
compress;

drop table i_TMP_clients;

create table custom_TMP_clients (
       id number primary key,
       name varchar2(32) not null,
       patronymic varchar2(64) null,
       surname varchar2(64) not null,
       al_cdate date default sysdate,
       t_changed varchar2(1 char) not null,
       al_udate date default sysdate,
       t_load_id number not null
)
partition by range (al_cdate)
interval(interval '1' month)
subpartition by hash (id)
subpartitions 8
(
       partition p1 values less than (date '2022-01-01')
)
compress;

drop table custom_TMP_clients;
drop table custom_TMP_adress;

select * from custom_TMP_clients;
insert all 

insert into custom_TMP_clients(id, name, surname, t_changed, t_load_id) 
values (client_ids.nextval, 'John', 'Collins', '1', load_ids.nextval)

insert into custom_TMP_clients(id, name, surname, t_changed, t_load_id) 
values (client_ids.nextval, 'Lisa', 'Fox', '2', load_ids.nextval)

insert into custom_TMP_clients(id, name, surname, t_changed, t_load_id) 
values (client_ids.nextval, 'Kate', 'Patric', '3', load_ids.nextval)

insert into custom_TMP_clients(id, name, surname, t_changed, t_load_id) 
values (client_ids.nextval, 'Alex', 'Winston', '1', load_ids.nextval)

insert into custom_TMP_clients(id, name, surname, t_changed, t_load_id) 
values (client_ids.nextval, 'Molly', 'Chase', '2', load_ids.nextval)

insert into custom_TMP_clients(id, name, surname, t_changed, t_load_id) 
values (client_ids.nextval, 'Edward', 'Paker', '1', load_ids.nextval)

insert into custom_TMP_clients(id, name, surname, t_changed, t_load_id) 
values (client_ids.nextval, 'Tom', 'Shell', '2', load_ids.nextval)

select * from custom_TMP_clients;
----------------------------------------------------------------------------

insert into i_TMP_clients(id, name, surname) 
values (148, 'John', 'Collins');

insert into i_TMP_clients(id, name, surname) 
values (149, 'Lisa', 'Fox');

insert into i_TMP_clients(id, name, surname) 
values (154, 'Kate', 'Patric');

insert into i_TMP_clients(id, name, surname) 
values (150, 'Alex', 'Malboro');

insert into i_TMP_clients(id, name, surname) 
values (151, 'Molly', 'Fox');

insert into i_TMP_clients(id, name, surname) 
values (client_ids.nextval, 'Jale', 'Spy');

insert into i_TMP_clients(id, name, surname) 
values (client_ids.nextval, 'Cony', 'Newrby');

select * from i_TMP_clients;



